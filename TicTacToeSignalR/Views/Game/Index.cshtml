@model TicTacToeSignalR.ViewModel.ProfileViewModel
@{
    ViewBag.Title = "Tic Tac Toe Game";
}
<style type="text/css">
    #gameplace {
        float:left;
        width:400px;
        padding-left:10px;
    }
    .wait {
        cursor:wait;
    }
    .summary {
        background-color:#ccc;
        float:left;
        width:400px;
        padding:5px;  
    }
    .board-wrapper {
        width:100%;
    }
    
    table.board {
        width:360px;
        padding:0px;
        margin:0px;
        border:1px solid black;
        border-collapse:collapse;
    }
    table.board td {
        padding:0px;
        margin:0px;
        border:1px solid grey;
    }
    table.board a {
        width:120px;
        height:120px;
        display:block;
    }
    
    table.board a.selectedo,
    table.board a.selectedx,
    table.board a.wono,
    table.board a.wonx
     {
         cursor:not-allowed;
    }
    
    table.board a.selectedo,
    table.board a.o:hover {
       background-image:url("../../Content/themes/base/images/o.png");
       background-position:center center;
       background-repeat : no-repeat;
       background-color:#E48600;
    }
        
    table.board a.selectedx,
     table.board a.x:hover {
       background-image:url("../../Content/themes/base/images/x.png");
       background-position:center center;
       background-repeat : no-repeat;
       background-color:#91AB31;
    }

    table.board a.wono,
    table.board a.wono:hover {
       background-image:url("../../Content/themes/base/images/o.png");
       background-position:center center;
       background-repeat : no-repeat;
       background-color:red;
    }
    
    table.board a.wonx,
    table.board a.wonx:hover {
       background-image:url("../../Content/themes/base/images/x.png");
       background-position:center center;
       background-repeat : no-repeat;
       background-color:red;
    }

    #lobby {
        margin-left:auto;
        margin-right:auto;
    }
    #lobby .left-side {
        width:400px;
        float:left;
        margin-left:10px;
        margin-top:10px;
        background-color:black;
    }
    #lobby .right-side {
        width:100px;
        float:left;
        border:1px solid red;
    }
    ul{
        list-style-type:none;
        padding:0px;
    }
    li {
        margin-top: 3px;
    }
    .invite {
        background-color:#ff6a00;
        color:#fff;
        padding:10px;
    }
    #players-container {
        margin-left:10px;
        margin-right:10px; 
        margin-bottom:10px;
    }
    .invite-answer {
        background-color:#fff;
        color:red !important;
        text-decoration:none;
        padding:3px;
    }
    #inviter {
        font-weight:bold;
    }
    #game-session {
        color:#808080;
        margin-left: 10px;
        margin-top: 10px;
        width: 400px;
    }

    .btn-holder {
        margin:10px;
    }

    .player2, .player1 {
        background-color:black;
    }
    .player2 {
        background-color:none;
        color:#E48600;
    }
    .player1 {
        background-color:none;
        color:#91AB31;
    }
</style>


<div id="options">
    <div class="btn-holder">
        <a href="javascript:$.connection.gameHub.client.clientExitGame()" class="button" title="Exit game to start page" id="btn-exit">Exit Game</a>
        <a href="javascript:$.connection.gameHub.client.clientQuitToLobby()" class="button" title="Quit current game" style="display:none;" id="btn-lobby">Quit current game to lobby</a>
        <a href="#" class="button" id="btn-edit-profile">Settings</a>
    </div>
</div>

<div id="lobby-wrapper">

    <div id="lobby">
        <div class="left-side">
            <div>
                <h1>Lobby</h1>
            </div>
            <ul id="players-container"></ul>
        </div>
        <div class="left-side">
            <div id="invitation-container">
            </div>
            <div style="clear:left;"></div>
        </div>
        <div style="clear:left;"></div>
    </div>
    <div id="game-session" style="display:block;">
        <ul id="game-session-players"></ul>
    </div>
</div>


<div class="board-wrapper" style="display:none;">
    <h2></h2>
    <div id="gameplace">
    </div>
    <div class="summary">        
    </div>
    <div style="clear:both;"></div>
</div>


<script type="text/javascript">

    var gameContextNamespace = {
        IsGameOver : false,
        LastMove : '',
        MovesList: [],
        Movement : function (x, y, piece) {
            if (x && typeof (x) === 'number') {
                this.X = x;
            }
            else {
                throw new Error("Parameter <x> must be a number greather then 0.");
            }
            if (y && typeof (y) === 'number') {
                this.Y = y;
            }
            else {
                throw new Error("Parameter <y> must be a number greather then 0.");
            }
            if (piece && typeof (piece) === 'string' && piece.length === 1) {
                this.Piece = piece;
            }
            else {
                throw new Error("Parameter <piece> must be a not null char.");
            }
        },
        ClearPreviousGame: function () {
            gameContextNamespace.IsGameOver = false;
            gameContextNamespace.LastMove = '';
            gameContextNamespace.MovesList = [];

            $('.summary > div').remove();
            $('#notification-panel').removeClass().addClass('green');
            $('#notifcation-message').html('');
        }
    };

    $(function () {
        //signalR
        var proxy = $.connection.gameHub;
        proxy.state.name = '@Model.Nick';
        proxy.state.avatar = '@Model.Avatar';

        proxy.client.test = function (data) {
            alert(data);
        }

        proxy.client.gameOver = function (game) {
            if (game != null) {

                //change board pieces
                if (game.Moves != null) {
                    $.each(game.Moves, function (index, move) {
                        if (move.IsWinningMove == true) {
                            $('.board td a[data-x="' + move.X + '"][data-y="' + move.Y + '"]').removeClass().addClass('won' + move.Piece);
                        }
                    });
                }
                //notify players
                if (game.Result == 'Won') {
                    if (game.Winner.Id == $.connection.gameHub.connection.id) {
                        proxy.client.notify({ Message: 'YOU WIN!!!!!!', Type: 'blue' });
                    }
                    else {
                        proxy.client.notify({ Message: 'YOU LOSE!', Type: 'red' });
                    }
                    gameContextNamespace.IsGameOver = true;
                    return;
                }
                else if (game.Result == 'Draw') {
                    proxy.client.notify({ Message: 'ITS A DRAW!', Type: 'blue' });
                    $.each(game.Moves, function (index, move) {
                        $('.board td a[data-x="' + move.X + '"][data-y="' + move.Y + '"]').removeClass().addClass('won' + move.Piece);
                    });
                    gameContextNamespace.IsGameOver = true;
                    return;
                }
            }
        }

        proxy.client.notify = function (n) {
            $('#notification-panel').removeClass().addClass(n.Type);
            $('#notifcation-message').html(n.Message);
            $('#notification-panel').fadeIn(300);
        }

        proxy.client.callMovePiece = function (px, py, paramPiece, cellId) {

            if (!gameContextNamespace.IsGameOver && ((gameContextNamespace.LastMove == '' && paramPiece == 'x') || (gameContextNamespace.LastMove != '' && gameContextNamespace.LastMove != paramPiece))) {
                //making selection for current player
                var selectedCell = $('#' + cellId);
                selectedCell.removeAttr('href');
                selectedCell.removeClass(paramPiece).addClass('selected' + paramPiece);

                var notification = {
                    Message: 'Wait for the other player to move!',
                    Type: 'red'
                };
                proxy.client.notify(notification);

                //preparing what to send to the server
                var move = {
                    x: px,
                    y: py,
                    piece: paramPiece
                };
                var gameId = $('.board').attr('data-id');
                var playerId = $.connection.gameHub.connection.id;
                proxy.server.serverCallMovePiece(gameId, move, playerId);
                gameContextNamespace.LastMove = paramPiece;
            }
            else {
                if (gameContextNamespace.IsGameOver) {
                    proxy.client.notify({ Message: 'GAME OVER!', Type: 'red' });
                }
                else {
                    proxy.client.notify({ Message: 'Impossible. Invalid move', Type: 'red' });
                }
            }
        }

        proxy.client.movePiece = function (message, movement) {
            var pieces = $('.board td a');
            if (pieces != null)
            {
                $.each(pieces, function (index, p) {
                    var selectedCellId = p.getAttribute('id');
                    var x = p.getAttribute('data-x');
                    var y = p.getAttribute('data-y');
                    if (movement.X == x && movement.Y == y) {

                        var selectedCell = $('#' + selectedCellId);

                        selectedCell.removeAttr('href');
                        selectedCell.removeClass().addClass('selected' + movement.Piece);
                        gameContextNamespace.LastMove = movement.Piece;
                    }
                });
            }

            var notification = {
                Message: 'Your move!',
                Type: 'green'
            };
            proxy.client.notify(notification);
            proxy.client.appendSummary(message);
        }

        proxy.client.startGame = function() {
            $('#lobby-wrapper').fadeOut(200, function () {
                $('#invite').css("display", "none");
                $('.board-wrapper').fadeIn(200);
            });
        }

        proxy.client.clientExitGame = function () {
            gameContextNamespace.ClearPreviousGame();
            var gameId = $('.board').attr('data-id');
            proxy.server.exitGame(gameId,$.connection.gameHub.connection.id);
        }
        proxy.client.exitGame = function () {
            window.location.href = "/";
        }
        
        proxy.client.clientQuitToLobby = function () {
            gameContextNamespace.ClearPreviousGame();
            var gameId = $('.board').attr('data-id');
            proxy.server.quitToLobby(gameId, $.connection.gameHub.connection.id)
        }

        proxy.client.clientShowLobby = function () {
            gameContextNamespace.ClearPreviousGame();
            $('#gameplace').html('');
            $('.board-wrapper').css('display', 'none');
            $('#btn-lobby').css('display', 'none')
            $('#lobby').fadeIn(100);
            $('#game-session-players > li').remove();
            $('#game-session').css('display', 'none');

            proxy.server.playerJoined(
            {
                Nick: proxy.state.name,
                Id: $.connection.gameHub.connection.id,
                Avatar: proxy.state.avatar
            });
        }
        
        proxy.client.sendAnswer = function (id, answer) {
            $('#' + id).fadeOut(answer == true ? 0 : 200);
            proxy.server.sendInviteAnswer({
                InviteId: id,
                Accepted: answer
            });
        }

        proxy.client.clientRenderBoard = function (boardMarkup,game) {
            $('#gameplace').append(boardMarkup);
            $('.board-wrapper').css("display", "block");
            $('#lobby').fadeOut(100);
            $('#btn-lobby').css('display', 'inline')

            $('#game-session-players > li').remove();

            if (game != null) {
                if (game.Player1 != null) {
                    $('#game-session-players').append('<li class="player1 ' + game.Player1.Avatar + '">' + game.Player1.Nick + '</li>');
                }

                if (game.Player2 != null) {
                    $('#game-session-players').append('<li class="player2 ' + game.Player2.Avatar + '">' + game.Player2.Nick + '</li>');
                }

                if (game.Player1.Id == $.connection.gameHub.connection.id) {
                    proxy.client.notify({ Message: 'Your move!', Type: 'green' });
                }
                else {
                    proxy.client.notify({ Message: 'Wait for the other player to move', Type: 'red' });
                }
            }
            $('#game-session').css('display', 'block');
        }

        proxy.client.showRejectedMessage = function () {
            $('#invite').fadeOut(200);
        }

        proxy.client.showInviteModal = function (markup) {
            $('#invitation-container').append(markup);
        };

        proxy.client.inviteToPlayFromClient = function (toNick,toConnId,toAvatar) {
            proxy.server.inviteToPlay(
                {
                    "From": {
                        "Nick": proxy.state.name,
                        "Id": $.connection.gameHub.connection.id,
                        "Avatar": proxy.state.avatar
                    },
                    "To": {
                        "Nick": toNick,
                        "Id": toConnId,
                        "Avatar": toAvatar
                    }
                });
        }

        proxy.client.refreshSummary = function(data) {
            $('.summary > div').remove();
            $.each(data, function (index, val) {
                $('.summary').append('<div>' + val + '</div>');
            });
        }

        proxy.client.appendSummary = function (data) {
            $('.summary').append('<div>' + data + '</div>');
        }

        proxy.client.updateSummary = function (data) {
            $('.summary > div').remove();

            $.each(data, function () {
                $('.summary').append('<div>' + this + '</div>');
            });
        };

        proxy.client.refreshPlayersList = function (playerList) {
            $('#players-container > li').remove();

            $.each(playerList, function (index, player) {
                    var appendContent = '';
                    if (player != null && player.Nick != proxy.state.name) {
                        appendContent = '<li>';
                        appendContent += '<a href="javascript:$.connection.gameHub.client.inviteToPlayFromClient(';
                        appendContent += "'"+ player.Nick+"',";
                        appendContent += "'" + player.Id + "',";
                        appendContent += "'" + player.Avatar + "'";
                        appendContent += ')" class="'+player.Avatar+'">' + player.Nick + '</a></li>';
                    }
                    else {
                        appendContent = '<li>';
                        appendContent += '<a href="javascript:void(0)" data-id="' + player.Id + '" class="'+player.Avatar+' selected" title="Its you!">' + player.Nick + '</a></li>';
                    }
                    $('#players-container').append(appendContent);
                })
        }


        proxy.server.autoCloseInvite = function (guid) {
        }

        $.connection.hub.start().done(function () {
            proxy.server.playerJoined(
                {
                    Nick: proxy.state.name,
                    Id: $.connection.gameHub.connection.id,
                    Avatar: proxy.state.avatar
                });
        })
        .fail(function () {
            alert('failed to load signalr');
        });
    });
</script>