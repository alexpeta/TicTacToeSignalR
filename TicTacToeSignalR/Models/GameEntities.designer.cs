#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17626
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TicTacToeSignalR.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="TicTacToe")]
	public partial class GameEntitiesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertGame(Game instance);
    partial void UpdateGame(Game instance);
    partial void DeleteGame(Game instance);
    partial void InsertPlayer(Player instance);
    partial void UpdatePlayer(Player instance);
    partial void DeletePlayer(Player instance);
    partial void InsertMovement(Movement instance);
    partial void UpdateMovement(Movement instance);
    partial void DeleteMovement(Movement instance);
    #endregion
		
		public GameEntitiesDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["TicTacToeConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public GameEntitiesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public GameEntitiesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public GameEntitiesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public GameEntitiesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Game> Games
		{
			get
			{
				return this.GetTable<Game>();
			}
		}
		
		public System.Data.Linq.Table<Player> Players
		{
			get
			{
				return this.GetTable<Player>();
			}
		}
		
		public System.Data.Linq.Table<Movement> Movements
		{
			get
			{
				return this.GetTable<Movement>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Game")]
	public partial class Game : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _GameId;
		
		private int _Duration;
		
		private System.Guid _Player1;
		
		private System.Guid _Player2;
		
		private char _P1Piece;
		
		private char _P2Piece;
		
		private bool _IsFinished;
		
		private EntitySet<Movement> _Movements;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGameIdChanging(System.Guid value);
    partial void OnGameIdChanged();
    partial void OnDurationChanging(int value);
    partial void OnDurationChanged();
    partial void OnPlayer1Changing(System.Guid value);
    partial void OnPlayer1Changed();
    partial void OnPlayer2Changing(System.Guid value);
    partial void OnPlayer2Changed();
    partial void OnP1PieceChanging(char value);
    partial void OnP1PieceChanged();
    partial void OnP2PieceChanging(char value);
    partial void OnP2PieceChanged();
    partial void OnIsFinishedChanging(bool value);
    partial void OnIsFinishedChanged();
    #endregion
		
		public Game()
		{
			this._Movements = new EntitySet<Movement>(new Action<Movement>(this.attach_Movements), new Action<Movement>(this.detach_Movements));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid GameId
		{
			get
			{
				return this._GameId;
			}
			set
			{
				if ((this._GameId != value))
				{
					this.OnGameIdChanging(value);
					this.SendPropertyChanging();
					this._GameId = value;
					this.SendPropertyChanged("GameId");
					this.OnGameIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Duration", DbType="Int NOT NULL")]
		public int Duration
		{
			get
			{
				return this._Duration;
			}
			set
			{
				if ((this._Duration != value))
				{
					this.OnDurationChanging(value);
					this.SendPropertyChanging();
					this._Duration = value;
					this.SendPropertyChanged("Duration");
					this.OnDurationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Player1", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Player1
		{
			get
			{
				return this._Player1;
			}
			set
			{
				if ((this._Player1 != value))
				{
					this.OnPlayer1Changing(value);
					this.SendPropertyChanging();
					this._Player1 = value;
					this.SendPropertyChanged("Player1");
					this.OnPlayer1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Player2", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Player2
		{
			get
			{
				return this._Player2;
			}
			set
			{
				if ((this._Player2 != value))
				{
					this.OnPlayer2Changing(value);
					this.SendPropertyChanging();
					this._Player2 = value;
					this.SendPropertyChanged("Player2");
					this.OnPlayer2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_P1Piece", DbType="Char(1) NOT NULL")]
		public char P1Piece
		{
			get
			{
				return this._P1Piece;
			}
			set
			{
				if ((this._P1Piece != value))
				{
					this.OnP1PieceChanging(value);
					this.SendPropertyChanging();
					this._P1Piece = value;
					this.SendPropertyChanged("P1Piece");
					this.OnP1PieceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_P2Piece", DbType="Char(1) NOT NULL")]
		public char P2Piece
		{
			get
			{
				return this._P2Piece;
			}
			set
			{
				if ((this._P2Piece != value))
				{
					this.OnP2PieceChanging(value);
					this.SendPropertyChanging();
					this._P2Piece = value;
					this.SendPropertyChanged("P2Piece");
					this.OnP2PieceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsFinished", DbType="Bit NOT NULL")]
		public bool IsFinished
		{
			get
			{
				return this._IsFinished;
			}
			set
			{
				if ((this._IsFinished != value))
				{
					this.OnIsFinishedChanging(value);
					this.SendPropertyChanging();
					this._IsFinished = value;
					this.SendPropertyChanged("IsFinished");
					this.OnIsFinishedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Game_Movement", Storage="_Movements", ThisKey="GameId", OtherKey="GameId")]
		public EntitySet<Movement> Movements
		{
			get
			{
				return this._Movements;
			}
			set
			{
				this._Movements.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Movements(Movement entity)
		{
			this.SendPropertyChanging();
			entity.Game = this;
		}
		
		private void detach_Movements(Movement entity)
		{
			this.SendPropertyChanging();
			entity.Game = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Player")]
	public partial class Player : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _PlayerId;
		
		private string _Nick;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPlayerIdChanging(System.Guid value);
    partial void OnPlayerIdChanged();
    partial void OnNickChanging(string value);
    partial void OnNickChanged();
    #endregion
		
		public Player()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid PlayerId
		{
			get
			{
				return this._PlayerId;
			}
			set
			{
				if ((this._PlayerId != value))
				{
					this.OnPlayerIdChanging(value);
					this.SendPropertyChanging();
					this._PlayerId = value;
					this.SendPropertyChanged("PlayerId");
					this.OnPlayerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nick", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Nick
		{
			get
			{
				return this._Nick;
			}
			set
			{
				if ((this._Nick != value))
				{
					this.OnNickChanging(value);
					this.SendPropertyChanging();
					this._Nick = value;
					this.SendPropertyChanged("Nick");
					this.OnNickChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Movement")]
	public partial class Movement : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MovementId;
		
		private System.Guid _GameId;
		
		private byte _XPosition;
		
		private byte _YPosition;
		
		private char _PieceType;
		
		private EntityRef<Game> _Game;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMovementIdChanging(int value);
    partial void OnMovementIdChanged();
    partial void OnGameIdChanging(System.Guid value);
    partial void OnGameIdChanged();
    partial void OnXPositionChanging(byte value);
    partial void OnXPositionChanged();
    partial void OnYPositionChanging(byte value);
    partial void OnYPositionChanged();
    partial void OnPieceTypeChanging(char value);
    partial void OnPieceTypeChanged();
    #endregion
		
		public Movement()
		{
			this._Game = default(EntityRef<Game>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MovementId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MovementId
		{
			get
			{
				return this._MovementId;
			}
			set
			{
				if ((this._MovementId != value))
				{
					this.OnMovementIdChanging(value);
					this.SendPropertyChanging();
					this._MovementId = value;
					this.SendPropertyChanged("MovementId");
					this.OnMovementIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid GameId
		{
			get
			{
				return this._GameId;
			}
			set
			{
				if ((this._GameId != value))
				{
					if (this._Game.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGameIdChanging(value);
					this.SendPropertyChanging();
					this._GameId = value;
					this.SendPropertyChanged("GameId");
					this.OnGameIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_XPosition", DbType="TinyInt NOT NULL")]
		public byte XPosition
		{
			get
			{
				return this._XPosition;
			}
			set
			{
				if ((this._XPosition != value))
				{
					this.OnXPositionChanging(value);
					this.SendPropertyChanging();
					this._XPosition = value;
					this.SendPropertyChanged("XPosition");
					this.OnXPositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_YPosition", DbType="TinyInt NOT NULL")]
		public byte YPosition
		{
			get
			{
				return this._YPosition;
			}
			set
			{
				if ((this._YPosition != value))
				{
					this.OnYPositionChanging(value);
					this.SendPropertyChanging();
					this._YPosition = value;
					this.SendPropertyChanged("YPosition");
					this.OnYPositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PieceType", DbType="Char(1) NOT NULL")]
		public char PieceType
		{
			get
			{
				return this._PieceType;
			}
			set
			{
				if ((this._PieceType != value))
				{
					this.OnPieceTypeChanging(value);
					this.SendPropertyChanging();
					this._PieceType = value;
					this.SendPropertyChanged("PieceType");
					this.OnPieceTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Game_Movement", Storage="_Game", ThisKey="GameId", OtherKey="GameId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Game Game
		{
			get
			{
				return this._Game.Entity;
			}
			set
			{
				Game previousValue = this._Game.Entity;
				if (((previousValue != value) 
							|| (this._Game.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Game.Entity = null;
						previousValue.Movements.Remove(this);
					}
					this._Game.Entity = value;
					if ((value != null))
					{
						value.Movements.Add(this);
						this._GameId = value.GameId;
					}
					else
					{
						this._GameId = default(System.Guid);
					}
					this.SendPropertyChanged("Game");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
